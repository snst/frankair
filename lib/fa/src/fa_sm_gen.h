// Autogenerated with StateSmith
// User RenderConfig HFileTop text...
#pragma once
#include <stdint.h>
// user IRenderConfigC.HFileIncludes: whatever you want to put in here.
#include "fa_structs.h"
#include "fa_settings.h"
#include "fa_sensors.h"
#include "fa_timer.h"
#include "fa_log.h"

enum fa_sm_gen_EventId
{
    fa_sm_gen_EventId_EV_AUTO_SNIFF = 0,
    fa_sm_gen_EventId_EV_AUTO_WAIT = 1,
    fa_sm_gen_EventId_EV_ERROR = 2,
    fa_sm_gen_EventId_EV_REBOOT = 3,
    fa_sm_gen_EventId_EV_SETTINGS_CHANGED = 4,
    fa_sm_gen_EventId_EV_SNIFF_FINISHED = 5,
    fa_sm_gen_EventId_EV_UPDATE = 6,
};

enum
{
    fa_sm_gen_EventIdCount = 7
};

enum fa_sm_gen_StateId
{
    fa_sm_gen_StateId_ROOT = 0,
    fa_sm_gen_StateId_AUTO = 1,
    fa_sm_gen_StateId_ON = 2,
    fa_sm_gen_StateId_SNIFF = 3,
    fa_sm_gen_StateId_WAIT = 4,
    fa_sm_gen_StateId_ERROR = 5,
    fa_sm_gen_StateId_MANUAL = 6,
    fa_sm_gen_StateId_OFF = 7,
};

enum
{
    fa_sm_gen_StateIdCount = 8
};

typedef struct fa_sm_gen fa_sm_gen;
typedef void (*fa_sm_gen_Func)(fa_sm_gen* sm);

struct fa_sm_gen
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum fa_sm_gen_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    fa_sm_gen_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    fa_sm_gen_Func current_event_handlers[fa_sm_gen_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    fa_sm_gen_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        struct fa_settings_t* settings;
        struct fa_state_t* state;
        FAEvent<fa_sm_gen_EventId> eventSM;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void fa_sm_gen_ctor(fa_sm_gen* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void fa_sm_gen_start(fa_sm_gen* self);

// Dispatches an event to the state machine. Not thread safe.
void fa_sm_gen_dispatch_event(fa_sm_gen* self, enum fa_sm_gen_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* fa_sm_gen_state_id_to_string(const enum fa_sm_gen_StateId id);

